#!/bin/bash
# Git hook to:
# 1. Enforce conventional commit format for semantic-release
# 2. Prevent AI attributions in commit messages

# Get the commit message file
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check for conventional commit format
# Get the first line of the commit message
FIRST_LINE=$(echo "$COMMIT_MSG" | head -n1)

# Define valid conventional commit types
VALID_TYPES="feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert"

# Check if the commit message follows conventional format
# Pattern: type(scope): description OR type: description
if ! echo "$FIRST_LINE" | grep -qE "^($VALID_TYPES)(\([^)]+\))?: .+"; then
    # Check if it's a merge commit
    if ! echo "$FIRST_LINE" | grep -qE "^Merge "; then
        echo -e "${RED}‚ùå Commit rejected: Invalid conventional commit format${NC}"
        echo ""
        echo -e "${YELLOW}Your commit message:${NC}"
        echo "  $FIRST_LINE"
        echo ""
        echo -e "${GREEN}Commit message must follow Conventional Commits format:${NC}"
        echo -e "${BLUE}  type(scope): description${NC}  or  ${BLUE}type: description${NC}"
        echo ""
        echo -e "${GREEN}Valid types:${NC}"
        echo "  ‚Ä¢ feat:     A new feature"
        echo "  ‚Ä¢ fix:      A bug fix"
        echo "  ‚Ä¢ docs:     Documentation only changes"
        echo "  ‚Ä¢ style:    Code style changes (formatting, semicolons, etc)"
        echo "  ‚Ä¢ refactor: Code changes that neither fix bugs nor add features"
        echo "  ‚Ä¢ perf:     Performance improvements"
        echo "  ‚Ä¢ test:     Adding or updating tests"
        echo "  ‚Ä¢ build:    Changes to build system or dependencies"
        echo "  ‚Ä¢ ci:       Changes to CI configuration files and scripts"
        echo "  ‚Ä¢ chore:    Other changes that don't modify src or test files"
        echo "  ‚Ä¢ revert:   Reverts a previous commit"
        echo ""
        echo -e "${GREEN}Examples:${NC}"
        echo "  feat: add terminal widget with WebSocket support"
        echo "  fix(widget): resolve memory leak in terminal cleanup"
        echo "  docs: update README with installation instructions"
        echo "  ci: add Docker container for testing"
        echo ""
        exit 1
    fi
fi

# Define patterns to check for AI attributions
# These patterns are case-insensitive
AI_PATTERNS=(
    "Generated with.*Claude"
    "Co-Authored-By:.*Claude"
    "Generated by.*AI"
    "Created by.*AI"
    "Written by.*AI"
    "Generated with.*AI"
    "Co-authored-by:.*AI"
    "Co-authored-by:.*bot"
    "Generated using"
    "Auto-generated"
    "ü§ñ"
    "ü§ñ.*Generated"
    "Anthropic"
    "ChatGPT"
    "GPT-[0-9]"
    "Copilot"
    "AI-generated"
    "AI-assisted"
    "LLM"
)

# Check each pattern
for pattern in "${AI_PATTERNS[@]}"; do
    if echo "$COMMIT_MSG" | grep -iE "$pattern" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Commit rejected: AI attribution detected${NC}"
        echo -e "${YELLOW}Found pattern: '$pattern'${NC}"
        echo ""
        echo -e "${YELLOW}Your commit message contains:${NC}"
        echo "----------------------------------------"
        echo "$COMMIT_MSG"
        echo "----------------------------------------"
        echo ""
        echo -e "${GREEN}Please remove any AI attributions from your commit message.${NC}"
        echo -e "${GREEN}Commit messages should describe what changed and why, not how it was created.${NC}"
        echo ""
        echo "Example of a good commit message:"
        echo "  feat: add terminal widget with WebSocket support"
        echo ""
        echo "Example of rejected messages:"
        echo "  ‚ùå feat: add terminal widget (Generated with Claude)"
        echo "  ‚ùå feat: add terminal widget - AI-assisted"
        echo "  ‚ùå feat: add terminal widget ü§ñ"
        exit 1
    fi
done

# If we get here, the commit message is clean
exit 0